credentials:
  system:
    domainCredentials:
      - credentials:
          - x509ClientCert:
              scope: SYSTEM
              id: "docker_tls_certificate"
              # TODO: Note: these will be visible in http://localhost:8080/manage/configuration-as-code/viewExport
              # Is that fine? Think about it.
              clientKeySecret: "${readFile:${DOCKER_CERT_PATH}/key.pem}"
              clientCertificate: "${readFile:${DOCKER_CERT_PATH}/cert.pem}"
              serverCaCertificate: "${readFile:${DOCKER_CERT_PATH}/ca.pem}"


# Use the helper "scripts/create_jenkins_credential.sh" script to create Jenkins credentials via the API.
#
# While other credentials can also be created using Jenkins Configuration as Code (JCasC) YAML files,
# that method has a drawback: secrets passed via environment variables become visible
# through endpoints like /manage/configuration-as-code/viewExport and /manage/systemInfo.
#
# An alternative is using Ansible with Jinja templates to inject secrets into YAML,
# but that approach exposes secrets inside the container in plain text files,
# e.g., /var/jenkins_home/casc_configs/03b-credentials-secrets.yml.
#
# In contrast, this script avoids leaving secrets in config files or exposing them via web endpoints,
# making it a safer (though not perfect) approach for managing Jenkins credentials.
