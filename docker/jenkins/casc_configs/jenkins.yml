# For docs / examples:
# https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos
jenkins:
  systemMessage: "Welcome to Jenkins powered by Configuration as Code!"

  # Set the number of executors (parallel builds)
  numExecutors: 0

  # Set global environment variables
  globalNodeProperties:
    - envVars:
        env:
          - key: TEST_VARIABLE
            value: "Hello World"

  # Security settings (disable first-run setup wizard)
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          name: "Administrator"
          password: "${ADMIN_PASSWORD}"
        - id: "ci_user"
          name: "CI_User"
          password: "${CI_USER_PASSWORD}"

  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false

  nodes:
    - permanent:
        name: "jenkins-agent-1"
        remoteFS: "/home/jenkins"
        numExecutors: 2
        mode: NORMAL
        labelString: "docker"
        launcher:
          ssh:
            host: "jenkins-jenkins_agent-1"
            port: 22
            credentialsId: "jenkins-agent-ssh"
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false

    - permanent:
        name: "jenkins-agent-2"
        remoteFS: "/home/jenkins"
        numExecutors: 2
        mode: NORMAL
        labelString: "docker"
        launcher:
          ssh:
            host: "jenkins-jenkins_agent-2"
            port: 22
            credentialsId: "jenkins-agent-ssh"
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false

unclassified:
  timestamper:
    allPipelines: true
    systemTimeFormat: "yyyy-MM-dd HH:mm:ss.SSS"
  location:
    url: "http://localhost:8080/"
  mailer:
    smtpHost: "smtp.example.com"

credentials:
  system:
    domainCredentials:
      - credentials:
          - basicSSHUserPrivateKey:
              id: "jenkins-agent-ssh"
              description: "SSH key for Jenkins agents"
              scope: GLOBAL
              username: "jenkins"
              privateKeySource:
                directEntry:
                  privateKey: "${readFile:${SSH_PRIVATE_KEY_PATH}}"

# Configure pipeline jobs via Job DSL plugin
jobs:
  - script: |
      pipelineJob('jenkins-sanity-check-pipeline') {
        description("""
          This pipeline performs essential sanity checks to validate the Jenkins environment 
          before executing builds. It ensures that:

          - ✅ Ensures the job is not running on the master node.
          - ✅ Verifies the workspace and checks file creation.
          - ✅ Confirms that required Jenkins plugins are installed.
          - ✅ Runs parallel jobs to test concurrent execution.
          - ✅ Checks if Docker is running and accessible.

          This helps ensure that the build environment is correctly set up before executing further tasks.
        """)
        definition {
          cps {
            script("""
              pipeline {
                agent any
                stages {
                  stage('Check Agent Node') {
                    steps {
                      script {
                        def nodeName = env.NODE_NAME
                        def agentNodes = ['jenkins-agent-1', 'jenkins-agent-2']
                        echo "Running on node: " + nodeName
                        catchError(buildResult: 'UNSTABLE') {
                          if (nodeName == "master") {
                            error("❌ Job executed on master! Expected an agent.")
                          } else if (!agentNodes.contains(nodeName)) {
                            error("❌ Job ran on an unexpected node: " + nodeName)
                          } else {
                            echo "✅ Job executed correctly on agent: " + nodeName
                          }
                        }
                      }
                    }
                  }

                  stage('Workspace & File Check') {
                    steps {
                      catchError(buildResult: 'UNSTABLE') {
                        sh '''
                          echo "Test file" > testfile.txt
                          if [ ! -f testfile.txt ]; then
                            echo "❌ Test file was not created!"
                            exit 1
                          fi
                          echo "✅ Workspace and file creation verified!"
                      '''
                      }
                    }
                  }

                  stage('Check Jenkins Plugins') {
                    steps {
                      catchError(buildResult: 'UNSTABLE') {
                        script {
                          // Read plugins.txt and clean up the plugin list
                          def requiredPlugins = readFile('/home/jenkins/plugins.txt')
                              .split("\\r?\\n")
                              .collect { it.split("#")[0].trim() } // Remove comments
                              .findAll { it } // Remove empty lines

                          // Parse required plugins and their versions
                          def pluginVersionMap = [:]
                          requiredPlugins.each { plugin ->
                            def parts = plugin.split(":")
                            def pluginName = parts[0].trim()
                            def pluginVersion = parts.size() == 2 ? parts[1].trim() : null
                            pluginVersionMap[pluginName] = pluginVersion
                          }

                          // Fetch installed plugins from Jenkins API
                          def pluginList = sh(
                            script: '''
                              curl -s -u "admin:Admin@123" "http://jenkins:8080/pluginManager/api/json?depth=1"
                            ''',
                            returnStdout: true
                          ).trim()

                          // Parse JSON response
                          def json = new groovy.json.JsonSlurper().parseText(pluginList)

                          // Convert plugin list into a map of shortName -> version
                          def installedPlugins = json.plugins.collectEntries { [(it.shortName): it.version] }

                          // Check for missing or outdated plugins
                          def missingPlugins = []
                          def outdatedPlugins = []
                          pluginVersionMap.each { pluginName, requiredVersion ->
                            def installedVersion = installedPlugins[pluginName]
                            if (!installedVersion) {
                              missingPlugins.add(pluginName + (requiredVersion ? ":" + requiredVersion : ""))
                            } else {
                              if (requiredVersion && installedVersion != requiredVersion) {
                                outdatedPlugins.add(pluginName + ": " + installedVersion + " (required: " + requiredVersion + ")")
                              }
                            }
                          }

                          if (missingPlugins.isEmpty() && outdatedPlugins.isEmpty()) {
                            echo "✅ All required plugins are installed with the correct versions."
                          } else {
                            if (!missingPlugins.isEmpty()) {
                              def missingList = missingPlugins.join(', ')
                              echo "❌ Missing plugins: " + missingList
                            }
                            if (!outdatedPlugins.isEmpty()) {
                              def outdatedList = outdatedPlugins.join(', ')
                              echo "❌ Outdated plugins: " + outdatedList
                            }
                            error("Plugin verification failed.")
                          }
                        }
                      }
                    }
                  }

                  stage('Run Parallel Jobs') {
                    parallel {
                      stage('Parallel Job 1') {
                        steps {
                          catchError(buildResult: 'UNSTABLE') {
                            sh 'echo "Running parallel job 1..." && sleep 2 && echo "✅ Parallel Job 1 Done!"'
                          }
                        }
                      }
                      stage('Parallel Job 2') {
                        steps {
                          catchError(buildResult: 'UNSTABLE') {
                            sh 'echo "Running parallel job 2..." && sleep 2 && echo "✅ Parallel Job 2 Done!"'
                          }
                        }
                      }
                    }
                  }

                  stage('Check Docker Connectivity') {
                    steps {
                      catchError(buildResult: 'UNSTABLE') {
                        sh '''
                          if ! docker ps > /dev/null 2>&1; then
                            echo "❌ Docker is not accessible!"
                            exit 1
                          fi
                          echo "✅ Docker is running!"
                        '''
                      }
                    }
                  }
                }
              }
            """.stripIndent())
            sandbox()
          }
        }
      }
