# For docs / examples:
# https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos
jenkins:
  systemMessage: "Welcome to Jenkins powered by Configuration as Code!"

  # Set the number of executors (parallel builds)
  numExecutors: 0

  # Set global environment variables
  globalNodeProperties:
    - envVars:
        env:
          - key: TEST_VARIABLE
            value: "Hello World"

  # Security settings (disable first-run setup wizard)
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          name: "Administrator"
          password: "${ADMIN_PASSWORD}"
        - id: "ci_user"
          name: "CI_User"
          password: "${CI_USER_PASSWORD}"

  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false

  clouds:
    - docker:
        name: "Docker"
        containerCap: 5  # Global Limit for the Cloud -maximum number of running containers for this entire Docker cloud.
        errorDuration: 313
        dockerApi:
          dockerHost:
            uri: "tcp://dind:2375"  # Agents need Docker access - points agents to dind container
          readTimeout: 120
          connectTimeout: 60
        templates:
          - &base-template  # Define a reusable template
            name: "docker-agent-template"
            pullTimeout: 171
            remoteFs: "/home/jenkins/agent"
            labelString: "docker-agent alpine jdk21 alpine-jdk21 git-2.43"
            instanceCapStr: "2"  # Limit max agents that can be launched from this specific agent template.
            retentionStrategy:
              idleMinutes: 1  # Number of minutes of idleness after which to kill the agent
            dockerTemplateBase: &common-docker-template-base  # Define a reusable template
              memorySwap: 0  # Disables swap, preventing memory overuse.
              memoryLimit: 512m  # Restricts agent container memory usage to 512MB.
              image: "jenkins/inbound-agent:jdk21"
            connector:
              attach:
                user: "jenkins"
          - <<: *base-template  # Reuse the base template override the fields with different values
            name: "docker-agent-on-hostnet-template"
            labelString: "docker-agent-on-hostnet alpine jdk21 alpine-jdk21 git-2.43"
            dockerTemplateBase:
              <<: *common-docker-template-base
              network: host  # To allow access to the host network

unclassified:
  timestamper:
    allPipelines: true
    systemTimeFormat: "yyyy-MM-dd HH:mm:ss.SSS"
  location:
    url: "http://localhost:8080/"
  mailer:
    smtpHost: "smtp.example.com"

# Configure pipeline jobs via Job DSL plugin
jobs:
  - script: |
      pipelineJob('jenkins-sanity-check-pipeline') {
        description("""
          This pipeline performs essential sanity checks to validate the Jenkins environment 
          before executing builds. It ensures that:

          - ✅ Ensures the job is not running on the master node.
          - ✅ Verifies the workspace and checks file creation.
          - ✅ Confirms that required Jenkins plugins are installed.
          - ✅ Runs parallel jobs to test concurrent execution.
          - ✅ Checks if Docker is running and accessible.

          This helps ensure that the build environment is correctly set up before executing further tasks.
        """)
        definition {
          cps {
            script("""
              pipeline {
                agent any
                stages {
                  stage('Check Agent Node') {
                    steps {
                      script {
                        def nodeName = env.NODE_NAME
                        echo "Running on node: " + nodeName
                        catchError(buildResult: 'UNSTABLE') {
                          if (nodeName == "master") {
                            error("❌ Job executed on master! Expected an agent.")
                          } else if (!(nodeName ==~ /^docker-agent(-on-hostnet)?-template-.*/)) {
                            error("❌ Job ran on an unexpected node: " + nodeName)
                          } else {
                            echo "✅ Job executed correctly on agent: " + nodeName
                          }
                        }
                      }
                    }
                  }

                  stage('Workspace & File Check') {
                    steps {
                      catchError(buildResult: 'UNSTABLE') {
                        sh '''
                          echo "Test file" > testfile.txt
                          if [ ! -f testfile.txt ]; then
                            echo "❌ Test file was not created!"
                            exit 1
                          fi
                          echo "✅ Workspace and file creation verified!"
                      '''
                      }
                    }
                  }

                  stage('Agent-to-Controller Network Test') {
                    agent { label 'docker-agent-on-hostnet' }
                    steps {
                      catchError(buildResult: 'UNSTABLE') {
                        sh '''
                          if curl -s -o /dev/null --connect-timeout 5 --fail http://jenkins:8080/login; then
                            echo "✅ Agent can reach Jenkins controller!"
                          else
                            echo "❌ Agent cannot reach Jenkins controller!"
                            exit 1
                          fi
                        '''
                      }
                    }
                  }

                  //stage('Check Jenkins Plugins') {
                  //  steps {
                  //    catchError(buildResult: 'UNSTABLE') {
                  //      script {
                  //        // Read plugins.txt and clean up the plugin list
                  //        def requiredPlugins = readFile('/home/jenkins/plugins.txt')
                  //            .split("\\r?\\n")
                  //            .collect { it.split("#")[0].trim() } // Remove comments
                  //            .findAll { it } // Remove empty lines
                  //
                  //        // Parse required plugins and their versions
                  //        def pluginVersionMap = [:]
                  //        requiredPlugins.each { plugin ->
                  //          def parts = plugin.split(":")
                  //          def pluginName = parts[0].trim()
                  //          def pluginVersion = parts.size() == 2 ? parts[1].trim() : null
                  //          pluginVersionMap[pluginName] = pluginVersion
                  //        }
                  //
                  //        // Fetch installed plugins from Jenkins API
                  //        def pluginList = sh(
                  //          script: '''
                  //            curl -s -u "admin:Admin@123" "http://jenkins:8080/pluginManager/api/json?depth=1"
                  //          ''',
                  //          returnStdout: true
                  //        ).trim()
                  //
                  //        // Parse JSON response
                  //        def json = new groovy.json.JsonSlurper().parseText(pluginList)
                  //
                  //        // Convert plugin list into a map of shortName -> version
                  //        def installedPlugins = json.plugins.collectEntries { [(it.shortName): it.version] }
                  //
                  //        // Check for missing or outdated plugins
                  //        def missingPlugins = []
                  //        def outdatedPlugins = []
                  //        pluginVersionMap.each { pluginName, requiredVersion ->
                  //          def installedVersion = installedPlugins[pluginName]
                  //          if (!installedVersion) {
                  //            missingPlugins.add(pluginName + (requiredVersion ? ":" + requiredVersion : ""))
                  //          } else {
                  //            if (requiredVersion && installedVersion != requiredVersion) {
                  //              outdatedPlugins.add(pluginName + ": " + installedVersion + " (required: " + requiredVersion + ")")
                  //            }
                  //          }
                  //        }
                  //
                  //        if (missingPlugins.isEmpty() && outdatedPlugins.isEmpty()) {
                  //          echo "✅ All required plugins are installed with the correct versions."
                  //        } else {
                  //          if (!missingPlugins.isEmpty()) {
                  //            def missingList = missingPlugins.join(', ')
                  //            echo "❌ Missing plugins: " + missingList
                  //          }
                  //          if (!outdatedPlugins.isEmpty()) {
                  //            def outdatedList = outdatedPlugins.join(', ')
                  //            echo "❌ Outdated plugins: " + outdatedList
                  //          }
                  //          error("Plugin verification failed.")
                  //        }
                  //      }
                  //    }
                  //  }
                  //}

                  stage('Run Parallel Jobs') {
                    parallel {
                      stage('Parallel Job 1') {
                        steps {
                          catchError(buildResult: 'UNSTABLE') {
                            sh 'echo "Running parallel job 1..." && sleep 2 && echo "✅ Parallel Job 1 Done!"'
                          }
                        }
                      }
                      stage('Parallel Job 2') {
                        steps {
                          catchError(buildResult: 'UNSTABLE') {
                            sh 'echo "Running parallel job 2..." && sleep 2 && echo "✅ Parallel Job 2 Done!"'
                          }
                        }
                      }
                    }
                  }

                  //stage('Check Docker Connectivity') {
                  //  steps {
                  //    catchError(buildResult: 'UNSTABLE') {
                  //      sh '''
                  //        if ! docker ps > /dev/null 2>&1; then
                  //          echo "❌ Docker is not accessible!"
                  //          exit 1
                  //        fi
                  //        echo "✅ Docker is running!"
                  //      '''
                  //    }
                  //  }
                  //}
                }
              }
            """.stripIndent())
            sandbox()
          }
        }
      }
