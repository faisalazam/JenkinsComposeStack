# For docs / examples:
# https://github.com/jenkinsci/configuration-as-code-plugin/tree/master/demos
jenkins:
  systemMessage: "Welcome to Jenkins powered by Configuration as Code!"

  # Set the number of executors (parallel builds)
  numExecutors: 0

  # Set global environment variables
  globalNodeProperties:
    - envVars:
        env:
          - key: TEST_VARIABLE
            value: "Hello World"

  # Security settings (disable first-run setup wizard)
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "admin"
          name: "Administrator"
          password: "${ADMIN_PASSWORD}"

  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false

  nodes:
    - permanent:
        name: "jenkins-agent-1"
        remoteFS: "/home/jenkins"
        numExecutors: 2
        mode: NORMAL
        labelString: "docker"
        launcher:
          ssh:
            host: "jenkins-jenkins_agent-1"
            port: 22
            credentialsId: "jenkins-agent-ssh"
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false

    - permanent:
        name: "jenkins-agent-2"
        remoteFS: "/home/jenkins"
        numExecutors: 2
        mode: NORMAL
        labelString: "docker"
        launcher:
          ssh:
            host: "jenkins-jenkins_agent-2"
            port: 22
            credentialsId: "jenkins-agent-ssh"
            sshHostKeyVerificationStrategy:
              manuallyTrustedKeyVerificationStrategy:
                requireInitialManualTrust: false

unclassified:
  timestamper:
    allPipelines: true
    systemTimeFormat: "yyyy-MM-dd HH:mm:ss.SSS"
  location:
    url: "http://localhost:8080/"
  mailer:
    smtpHost: "smtp.example.com"

credentials:
  system:
    domainCredentials:
      - credentials:
          - basicSSHUserPrivateKey:
              id: "jenkins-agent-ssh"
              description: "SSH key for Jenkins agents"
              scope: GLOBAL
              username: "jenkins"
              privateKeySource:
                directEntry:
                  privateKey: "${readFile:${SSH_PRIVATE_KEY_PATH}}"

# Configure pipeline jobs via Job DSL plugin
jobs:
  - script: |
      pipelineJob('jenkins-sanity-check-pipeline') {
        description("""
          This pipeline performs essential sanity checks to validate the Jenkins environment 
          before executing builds. It ensures that:
      
          - ✅ Ensures the job is not running on the master node.
          - ✅ Verifies the workspace and checks file creation.
          - ✅ Confirms that required Jenkins plugins are installed.
          - ✅ Runs parallel jobs to test concurrent execution.
          - ✅ Checks if Docker is running and accessible.
      
          This helps ensure that the build environment is correctly set up before executing further tasks.
        """)
        definition {
          cps {
            script("""
              pipeline {
                  agent any
                  stages {
                      stage('Check Agent Node') {
                          steps {
                              script {
                                  def nodeName = env.NODE_NAME
                                  def agentNodes = ['agent-1', 'agent-2']
                                  echo "Running on node: \${nodeName}"
                                  catchError(buildResult: 'UNSTABLE') {
                                      if (nodeName == "master") {
                                          error("❌ Job executed on master! Expected an agent.")
                                      } else if (!agentNodes.contains(nodeName)) {
                                          error("❌ Job ran on an unexpected node: \${nodeName}")
                                      } else {
                                          echo "✅ Job executed correctly on agent: \${nodeName}"
                                      }
                                  }
                              }
                          }
                      }
      
                      stage('Workspace & File Check') {
                          steps {
                              catchError(buildResult: 'UNSTABLE') {
                                  sh '''
                                      echo "Test file" > testfile.txt
                                      if [ ! -f testfile.txt ]; then
                                          echo "❌ Test file was not created!"
                                          exit 1
                                      fi
                                      echo "✅ Workspace and file creation verified!"
                                  '''
                              }
                          }
                      }

                      stage('Check Jenkins Plugins') {
                          steps {
                              catchError(buildResult: 'UNSTABLE') {
                                  script {
                                      def pluginList = sh(
                                          script: '''
                                              curl -s -u "admin:Admin@123" "http://jenkins:8080/pluginManager/api/json?depth=1"
                                          ''',
                                          returnStdout: true
                                      ).trim()

                                      if (pluginList.contains('"shortName":"configuration-as-code"')) {
                                          echo "✅ Required plugin 'configuration-as-code' is installed."
                                      } else {
                                          error("❌ Required plugin 'configuration-as-code' is missing!")
                                      }
                                  }
                              }
                          }
                      }

                      stage('Run Parallel Jobs') {
                          parallel {
                              stage('Parallel Job 1') {
                                  steps {
                                      catchError(buildResult: 'UNSTABLE') {
                                          sh 'echo "Running parallel job 1..." && sleep 2 && echo "✅ Parallel Job 1 Done!"'
                                      }
                                  }
                              }
                              stage('Parallel Job 2') {
                                  steps {
                                      catchError(buildResult: 'UNSTABLE') {
                                          sh 'echo "Running parallel job 2..." && sleep 2 && echo "✅ Parallel Job 2 Done!"'
                                      }
                                  }
                              }
                          }
                      }

                      stage('Check Docker Connectivity') {
                          steps {
                              catchError(buildResult: 'UNSTABLE') {
                                  sh '''
                                      if ! docker ps > /dev/null 2>&1; then
                                          echo "❌ Docker is not accessible!"
                                          exit 1
                                      fi
                                      echo "✅ Docker is running!"
                                  '''
                              }
                          }
                      }
                  }
              }
            """.stripIndent())
            sandbox()
          }
        }
      }
