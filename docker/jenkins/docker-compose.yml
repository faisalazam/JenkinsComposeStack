services:
  # The Jenkins container does not have Docker CLI installed and there is no such need as the agents are spawned in
  # the dind container and handle all Docker-related tasks.
  # Diagnostics (or running the docker commands) can be performed directly inside dind, keeping the Jenkins container
  # lightweight and following best practices.
  jenkins:
    build:
      context: .
      dockerfile: Dockerfile.jenkins
    container_name: jenkins
    restart: unless-stopped
    user: ${JENKINS_USER}
    ports:
      - "${JENKINS_PORT}:8080"
      - "${JENKINS_AGENT_PORT}:50000"
    environment:
      - DOCKER_DAEMON_URL=${DOCKER_DAEMON_URL}
      - ADMIN_PASSWORD=${JENKINS_ADMIN_PASSWORD}
      - CASC_JENKINS_CONFIG=${JENKINS_CASC_CONFIG}
      - CI_USER_PASSWORD=${JENKINS_CI_USER_PASSWORD}
    volumes:
      - jenkins_home:/var/jenkins_home
      - jenkins_plugins:/usr/share/jenkins/ref
      - ./casc_configs/jenkins.yml:/var/jenkins_home/casc_configs/jenkins.yml
    networks:
      - jenkins_network
    depends_on:
      dind:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "sh", "-c", "curl -fs http://localhost:8080/login | grep -q 'Sign in to Jenkins'" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "${JENKINS_CPU_LIMIT}"        # Limit Jenkins to 2 CPU cores
          memory: "${JENKINS_MEMORY_LIMIT}"   # Max 4GB RAM for Jenkins
        reservations:
          cpus: "${JENKINS_CPU_RESERVATION}"       # Ensure at least 1 CPU is reserved
          memory: "${JENKINS_MEMORY_RESERVATION}"  # Ensure at least 2GB RAM is reserved

  dind:
    # The Docker daemon running in docker:dind, and Jenkins' agents will send docker commands here...
    image: docker:dind
    container_name: dind
    privileged: true
    environment:
      # TODO: Fix insecure access warnings in logs
      - DOCKER_TLS_CERTDIR=${DOCKER_TLS_CERTDIR}
    volumes:
      - dind_data:/var/lib/docker
      - jenkins_plugins:/var/jenkins_plugins
      - ./Dockerfile.agent:/var/lib/docker/build-contexts/Dockerfile.agent:ro
    healthcheck:
      test: ["CMD", "sh", "-c", "docker version --format '{{.Server.Version}}' || exit 1"]
      interval: 5s
      retries: 5
      start_period: 10s
    networks:
      - jenkins_network
    depends_on:
      registry:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "${DIND_CPU_LIMIT}"        # Limit dind to 2 CPU cores
          memory: "${DIND_MEMORY_LIMIT}"   # Max 4GB RAM for dind
        reservations:
          cpus: "${DIND_CPU_RESERVATION}"        # Ensure at least 1 CPU is reserved
          memory: "${DIND_MEMORY_RESERVATION}"   # Ensure at least 2GB RAM is reserved

  registry:
    image: registry:2.8.3
    container_name: registry
    restart: always
    ports:
      - "${REGISTRY_PORT}:5000"
    environment:
      - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry
    volumes:
      - registry_data:/var/lib/registry
    networks:
      - jenkins_network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "-q", "http://${REGISTRY_URL}/v2/" ]
      interval: 10s
      retries: 5
      start_period: 10s

  builder:
    image: docker:28.0.2-cli
    container_name: builder
    entrypoint: ["/bin/sh", "-c"]
    command:
      - |
        echo "Setting up the builder service..."
        ls -la /build-context/Dockerfile.agent
    volumes:
      - ./Dockerfile.agent:/build-context/Dockerfile.agent:ro
    networks:
      - jenkins_network
    depends_on:
      dind:
        condition: service_healthy
      registry:
        condition: service_healthy

volumes:
  dind_data:
  jenkins_home:
  # Sharing the jenkins_plugins volume between Jenkins and the Dind containers to mount in the Jenkins' agents
  # Since agents are spawn inside dind, all their mount paths must be relative to the dind containerâ€™s filesystem.
  # And is required just for the "jenkins-sanity-check-pipeline" pipeline to verify that all the required plugins
  # are installed.
  jenkins_plugins:
  registry_data:

networks:
  jenkins_network:
