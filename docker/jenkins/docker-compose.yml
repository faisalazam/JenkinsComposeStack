services:
  # The Jenkins container does not have Docker CLI installed and there is no such need as the agents are spawned in
  # the dind container and handle all Docker-related tasks.
  # Diagnostics (or running the docker commands) can be performed directly inside dind, keeping the Jenkins container
  # lightweight and following best practices.
  jenkins:
    build:
      context: .
      dockerfile: Dockerfile.jenkins
    container_name: jenkins
    restart: unless-stopped
    user: ${JENKINS_USER}
    ports:
      - "${JENKINS_PORT}:8080"
    environment:
      - JENKINS_HOME_DIR=${JENKINS_HOME_DIR}
      - DOCKER_DAEMON_URL=${DOCKER_DAEMON_URL}
      - ADMIN_PASSWORD=${JENKINS_ADMIN_PASSWORD}
      - CASC_JENKINS_CONFIG=${JENKINS_CASC_CONFIG}
      - CI_USER_PASSWORD=${JENKINS_CI_USER_PASSWORD}
      - DOCKER_CERT_PATH=${DOCKER_CLIENT_TLS_CERTDIR}
      - ENABLE_SEED_JOB=${ENABLE_SEED_JOB}
      - SEED_JOB_REPO_URL=${SEED_JOB_REPO_URL}
      - SEED_JOB_REPO_BRANCH=${SEED_JOB_REPO_BRANCH}
      - SEED_JOB_SCRIPT_PATH=${SEED_JOB_SCRIPT_PATH}
      - SEED_GENERATOR_JOB_NAME=${SEED_GENERATOR_JOB_NAME}
      - SEED_JOB_REPO_CREDENTIAL_ID=${SEED_JOB_REPO_CREDENTIAL_ID}
      - SEED_GENERATOR_JOB_DESCRIPTION=${SEED_GENERATOR_JOB_DESCRIPTION}
      - JENKINS_AGENT_REMOTEFS=${JENKINS_AGENT_REMOTEFS}
      - JENKINS_SLAVE_AGENT_PORT=${JENKINS_SLAVE_AGENT_PORT}
      - JENKINS_JCASC_SECRETS_DIR=${JENKINS_JCASC_SECRETS_DIR}
      - JENKINS_AGENT_WORKSPACE_DIR=${JENKINS_AGENT_WORKSPACE_DIR}
      - JENKINS_DOCKER_AGENT_IMAGE_PATH=${JENKINS_DOCKER_AGENT_IMAGE_PATH}
      - JENKINS_AGENT_SHARED_METADATA_DIR=${JENKINS_AGENT_SHARED_METADATA_DIR}
    volumes:
      - jenkins_home:${JENKINS_HOME_DIR}
      - jenkins_docker_certs:${DOCKER_CLIENT_TLS_CERTDIR}:ro # This shared volume will be mounted in all the clients accessing dind or docker
      - ./casc_configs:${JENKINS_CASC_CONFIG}
      - ./plugins.txt:/usr/share/jenkins/ref/plugins.txt
      - ./scripts/jenkins_entrypoint.sh:/usr/local/bin/jenkins_entrypoint.sh
      - jenkins_agent_dind_metadata_shared:${JENKINS_AGENT_SHARED_METADATA_DIR}:ro
    entrypoint: [ "/usr/bin/tini", "--" ]
    command: [ "sh", "/usr/local/bin/jenkins_entrypoint.sh" ]
    post_start:
      - command: "chown -R jenkins:jenkins ${JENKINS_HOME_DIR}"
        user: root
    networks:
      - jenkins_network
    depends_on:
      dind:
        condition: service_healthy
      registry:
        condition: service_healthy
      builder:
        condition: service_completed_successfully
    healthcheck:
      test: [ "CMD", "sh", "-c", "curl -fs http://localhost:8080/login | grep -q 'Sign in to Jenkins'" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          cpus: "${JENKINS_CPU_LIMIT}"
          memory: "${JENKINS_MEMORY_LIMIT}"
        reservations:
          cpus: "${JENKINS_CPU_RESERVATION}"
          memory: "${JENKINS_MEMORY_RESERVATION}"

  dind:
    # The Docker daemon running in docker:dind, and Jenkins' agents will send docker commands here...
    image: docker:dind
    # The "docker:dind" image will generate the TLS certs if the ${DOCKER_TLS_CERTDIR} is not empty.
    # And the generated certs are valid only for the {CONTAINER_ID}, docker and localhost, but not any other name.
    # So either the container name or one of its aliases has to be "docker" to avoid the "certificate is valid for..." error.
    container_name: docker
    restart: unless-stopped
    privileged: true
    environment:
      - DOCKER_TLS_CERTDIR=${DOCKER_TLS_CERTDIR}
    volumes:
      - dind_data:/var/lib/docker
      # Shared volume to make the Agent's filesystem visible to dind, so that the mount
      # paths work fine for the containers which are starting inside the Agents, e.g. ansible container.
      - jenkins_agent_dind_workspace_shared:${JENKINS_AGENT_WORKSPACE_DIR}
      - jenkins_agent_dind_metadata_shared:${JENKINS_AGENT_SHARED_METADATA_DIR}
      # This shared volume will be mounted in all the clients accessing dind or docker
      - jenkins_docker_certs:${DOCKER_CLIENT_TLS_CERTDIR}
      # Since agents are spawn inside dind, all their mount paths must be relative to the dind container’s filesystem.
      # So the ./plugins.txt is mounted in the Dind container to mount in the Jenkins' agents later
      # The ./plugins.txt mount is required just for the "jenkins-sanity-check-pipeline" pipeline
      # to verify that all the required plugins are installed.
      - ./plugins.txt:${JENKINS_AGENT_SHARED_METADATA_DIR}/plugins.txt
      - ./certs/registry.crt:/usr/local/share/ca-certificates/registry.crt:ro
    # chown to ensure Jenkins agent can write to shared volume (owned by UID 1000, i.e. the Jenkins user)
    command: sh -c "update-ca-certificates && chown -R 1000:1000 ${JENKINS_AGENT_WORKSPACE_DIR} ${JENKINS_AGENT_SHARED_METADATA_DIR} && dockerd-entrypoint.sh"
    healthcheck:
      test: ["CMD", "sh", "-c", "docker version --format '{{.Server.Version}}' || exit 1"]
      interval: 5s
      retries: 5
      start_period: 10s
    networks:
      - jenkins_network
    deploy:
      resources:
        limits:
          cpus: "${DIND_CPU_LIMIT}"
          memory: "${DIND_MEMORY_LIMIT}"
        reservations:
          cpus: "${DIND_CPU_RESERVATION}"
          memory: "${DIND_MEMORY_RESERVATION}"

  registry:
    image: distribution/distribution:3.0.0-rc.4
    container_name: registry
    restart: unless-stopped
    ports:
      - "${REGISTRY_PORT}:5000"
    environment:
      - REGISTRY_LOG_LEVEL=info
      - OTEL_TRACES_EXPORTER=none
      - REGISTRY_HTTP_SECRET=${REGISTRY_HTTP_SECRET}
      - REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY=/var/lib/registry
      - REGISTRY_HTTP_TLS_KEY=/certs/registry.key
      - REGISTRY_HTTP_TLS_CERTIFICATE=/certs/registry.crt
    volumes:
      - ./certs:/certs:ro
      - registry_data:/var/lib/registry
    networks:
      - jenkins_network
    healthcheck:
      test: [ "CMD", "wget", "--no-check-certificate", "--spider", "-q", "https://${REGISTRY_URL}/v2/" ]
      interval: 10s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          cpus: "${REGISTRY_CPU_LIMIT}"
          memory: "${REGISTRY_MEMORY_LIMIT}"
        reservations:
          cpus: "${REGISTRY_CPU_RESERVATION}"
          memory: "${REGISTRY_MEMORY_RESERVATION}"

  builder:
    image: docker:28.0.2-cli
    container_name: builder
    entrypoint: ["/bin/sh", "/scripts/builder_entrypoint.sh"]
    environment:
      - DOCKER_TLS_VERIFY=1
      - DOCKER_CERT_PATH=${DOCKER_CLIENT_TLS_CERTDIR}
      - DOCKER_HOST=${DOCKER_DAEMON_URL} # points builder to dind container
      - REGISTRY_URL=${REGISTRY_URL}
      - REGISTRY_USER=${REGISTRY_USER}
      - REGISTRY_PASSWORD=${REGISTRY_PASSWORD}
      - JENKINS_DOCKER_AGENT_IMAGE_PATH=${JENKINS_DOCKER_AGENT_IMAGE_PATH}
    volumes:
      - jenkins_docker_certs:${DOCKER_CLIENT_TLS_CERTDIR}:ro
      - ./Dockerfile.agent:/build-context/Dockerfile.agent:ro
      - ./scripts/builder_entrypoint.sh:/scripts/builder_entrypoint.sh
    networks:
      - jenkins_network
    depends_on:
      dind:
        condition: service_healthy
      registry:
        condition: service_healthy

volumes:
  dind_data:
  jenkins_home:
  # Mounting jenkins_agent_dind_workspace_shared volume to ${JENKINS_AGENT_WORKSPACE_DIR} path inside dind
  # -----------------------------------------------------------------------------------
  # Jenkins agents and DinD (Docker-in-Docker) containers operate in isolated contexts.
  # The Jenkins agent writes files to ${JENKINS_AGENT_WORKSPACE_DIR} inside its own container,
  # but DinD is a *separate container* and cannot see those files unless the path is shared.
  # Due to that issue, when jenkins agents will try to spin up ansible container, it'll fail
  # as it won't find the mounted files even though they exist on the agent filesystem. And that
  # happens because dind can't see that filesystem and the mounts work according to the dind's filesystem.
  #
  # Solution:
  # - Mount a shared named volume (jenkins_agent_dind_workspace_shared) to the *same path* inside both the agent
  # and DinD containers.
  # - Mount a shared named volume (jenkins_agent_dind_metadata_shared) to the *same path* inside the jenkins, agent
  # and DinD containers, so that the files can be shared between them if required.
  # - In the Jenkins Docker Cloud config, we set `remoteFs: ${JENKINS_AGENT_REMOTEFS}`,
  #   ensuring agents write to the ${JENKINS_AGENT_REMOTEFS} path.
  #
  # This makes agent-generated files (e.g. Ansible inventories) visible to DinD-based
  # builds or docker commands that need access to those artifacts.
  #
  # Without this shared mount, DinD would not see the agent’s filesystem and volume bind
  # mounts like "type=bind,src=${JENKINS_AGENT_WORKSPACE_DIR},..." would fail at runtime.
  jenkins_agent_dind_workspace_shared:
  jenkins_agent_dind_metadata_shared:
  registry_data:
  # Starting in 18.09+, the dind variants of this image will automatically generate TLS certificates in the directory
  # specified by the DOCKER_TLS_CERTDIR environment variable.
  # In order to make use of the TLS functionality from a "client" container, at least the client subdirectory of the
  # $DOCKER_TLS_CERTDIR directory needs to be shared and that's what this shared volume is used for.
  jenkins_docker_certs:

networks:
  jenkins_network:
